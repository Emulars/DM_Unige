import json
import logging
from service import Service

from reportlab.lib.pagesizes import letter # type: ignore
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak # type: ignore
from reportlab.lib.styles import getSampleStyleSheet # type: ignore
from reportlab.lib.styles import ParagraphStyle # type: ignore
from reportlab.lib.colors import black # type: ignore

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load the configuration from file
def load_configuration(filename):
    logging.info(f"Loading configuration from {filename}...")
    with open(filename, 'r') as file:
        config = json.load(file)
    return config

# Load the list of services from the configuration file
def load_services_from_configuration(config):
    logging.info("Loading services from file...")
    services = []
    for service_data in config['services']:
        service_name = service_data.get('service_name')
        if not service_name:
            logging.error("Service name not found in configuration.")
            continue

        service = Service(**service_data)
        services.append(service)

    return services

def write_vulnerabilities_to_pdf(services):
    logging.info("Writing vulnerabilities to PDF...")
    pdf_filename = "../configuration/vulnerabilities.pdf"
    doc = SimpleDocTemplate(pdf_filename, pagesize=letter)
    styles = getSampleStyleSheet()
    # Define a style for the link
    link_style = ParagraphStyle('LinkStyle', textColor=black, underline=True)
    content = []

    for service in services:
        content.append(Paragraph(f"<b>Service:</b> {service.service_name}", styles["Heading1"]))
        content.append(Paragraph(f"<i>IP:</i> {service.ip}", styles["BodyText"]))
        content.append(Paragraph(f"<i>Port:</i> {service.port}", styles["BodyText"]))
        content.append(Paragraph(f"<i>Version:</i> {service.version}", styles["BodyText"]))

        if service.vulnerabilities:
            content.append(Paragraph("<b>Vulnerabilities:</b>", styles["Heading2"]))
            for idx, vulnerability in enumerate(service.vulnerabilities, start=1):
                cve_id = ' '.join(vulnerability.id)
                status = ' '.join(vulnerability.status)
                description = ' '.join(vulnerability.description)
                action_due = ' '.join(vulnerability.actionDue) if vulnerability.actionDue else ''
                required_action = ' '.join(vulnerability.requiredAction) if vulnerability.requiredAction else ''
                score = ' '.join(vulnerability.score)

                content.append(Paragraph(f"<b><i>{idx}. CVE:</i></b> {cve_id}", styles["Bullet"]))                
                content.append(Paragraph(f"<b><i>Severity:</i></b> {score}", styles["Bullet"]))
                content.append(Paragraph(f"<b><i>Status:</i></b> {status}", styles["Bullet"]))
                content.append(Paragraph(f"<b><i>Description:</i></b> {description}", styles["Bullet"]))
                content.append(Paragraph(f"<b><i>URL:</i></b> <link href='{vulnerability.url}'>{vulnerability.url}</link>", link_style))
                if action_due: content.append(Paragraph(f"<b><i>Due action:</i></b> {action_due}", styles["Bullet"]))
                if required_action : content.append(Paragraph(f"<b><i>Required action:</i></b> {required_action}", styles["Bullet"]))
                
                content.append(Spacer(1, 12))
        else:
            content.append(Paragraph("No vulnerabilities found.", styles["BodyText"]))

        # When a new service is added, start from a new page
        # Add page break for new service
        if content:
            content.append(PageBreak())


    doc.build(content)
    logging.info("Vulnerabilities written to PDF.")

def main():
    logging.info("Starting main function...")
    
    config = load_configuration('../configuration/configuration.json')

    # Load services from configuration
    services = load_services_from_configuration(config)

    for service in services:
        service.get_version()
        service.check_vulnerabilities()

    # Write all the founded vulnerabilities on a file    
    write_vulnerabilities_to_pdf(services)
    logging.info("Main function finished.")

if __name__ == "__main__":
    main()
