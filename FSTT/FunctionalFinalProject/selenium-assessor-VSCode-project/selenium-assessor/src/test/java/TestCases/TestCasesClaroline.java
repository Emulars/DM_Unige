package TestCases;

import org.junit.BeforeClass;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import TestCases.PO.*;
import TestCases.PO.Claroline.CoursePage;
import TestCases.PO.Claroline.Enrol;
import TestCases.PO.Claroline.Login;
import TestCases.PO.Claroline.PlatformAdministratorPage;

public class TestCasesClaroline {

    @BeforeClass()
    public static void setup() {}

    private WebDriver driver;

    private Map<String, Object> vars;

    private JavascriptExecutor js;

    @Before
    public void setUp() {
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }

    @After
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void addUserTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        PlatformAdministratorPage _PlatformAdministratorPage = new PlatformAdministratorPage(driver, js, vars);
        _PlatformAdministratorPage.AddUser("admin", "admin", "Name001", "firstname001", "user001", "password001", "password001");
        assertThat(_PlatformAdministratorPage.set_XPATH_div2div2div_1(), is("The new user has been sucessfully created"));
        _PlatformAdministratorPage.click_LINKTEXT_Logout();
    }

    @Test
    public void searchUserTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        PlatformAdministratorPage _PlatformAdministratorPage = new PlatformAdministratorPage(driver, js, vars);
        _PlatformAdministratorPage.SearchUser("admin", "admin", "user001");
        assertThat(_PlatformAdministratorPage.set_ID_L0_1(), is("Name001"));
        assertThat(_PlatformAdministratorPage.set_CSSSELECTOR_tdnth_child3(), is("firstname001"));
        assertThat(_PlatformAdministratorPage.set_CSSSELECTOR_tdnth_child6(), is("User"));
        _PlatformAdministratorPage.click_LINKTEXT_Logout();
    }

    @Test
    public void loginUserTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        Login _Login = new Login(driver, js, vars);
        _Login.LoginUser("user001", "password001");
        assertThat(_Login.set_CSSSELECTOR_blockHeaderuserName_1(), is("firstname001 Name001"));
        _Login.click_LINKTEXT_Logout();
    }

    @Test
    public void addCourseTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        PlatformAdministratorPage _PlatformAdministratorPage = new PlatformAdministratorPage(driver, js, vars);
        _PlatformAdministratorPage.AddCourse("admin", "admin", "Course001", "001", "Sciences", "Economics");
        assert (_PlatformAdministratorPage.set_CSSSELECTOR_claroDialogMsg().size() > 0);
        _PlatformAdministratorPage.click_LINKTEXT_Continue();
    }

    @Test
    public void searchCourseTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        PlatformAdministratorPage _PlatformAdministratorPage = new PlatformAdministratorPage(driver, js, vars);
        _PlatformAdministratorPage.SearchCourse("admin", "admin", "Course001");
        assertThat(_PlatformAdministratorPage.set_CSSSELECTOR_tbodynth_child2tdnth_child2_1(), is("Course001"));
        assertThat(_PlatformAdministratorPage.set_ID_L0_1(), is("001"));
        _PlatformAdministratorPage.click_LINKTEXT_Logout();
    }

    @Test
    public void enrolUserTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        Enrol _Enrol = new Enrol(driver, js, vars);
        _Enrol.EnrolUser("user001", "password001", "Course001");
        assert (_Enrol.set_CSSSELECTOR_claroDialogMsg().size() > 0);
        _Enrol.click_LINKTEXT_Logout();
    }

    @Test
    public void addCourseEventTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        CoursePage _CoursePage = new CoursePage(driver, js, vars);
        _CoursePage.AddCourseEvent("admin", "admin", "Exam 001", "2023", "Genoa");
        assert (_CoursePage.set_CSSSELECTOR_claroDialogMsg().size() > 0);
        _CoursePage.click_LINKTEXT_Logout();
    }

    @Test
    public void addCourseExerciseTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        CoursePage _CoursePage = new CoursePage(driver, js, vars);
        _CoursePage.AddCourseExercise("admin", "admin", "Exercise 001");
        assert (_CoursePage.set_CSSSELECTOR_claroDialogMsg().size() > 0);
        _CoursePage.click_LINKTEXT_Logout();
    }

    @Test
    public void makeCourseExerciseVisibleTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        CoursePage _CoursePage = new CoursePage(driver, js, vars);
        _CoursePage.MakeCourseExerciseVisible("admin", "admin");
    }

    @Test
    public void addCourseExerciseQuestionsTest() {
        driver.get("http://localhost:3000/claroline11110/index.php");
        CoursePage _CoursePage = new CoursePage(driver, js, vars);
        _CoursePage.AddCourseExerciseQuestions("admin", "admin", "Question 1", "3", "-3", "Question 2", "3", "-3", "Question 3", "3", "-3");
        assertThat(_CoursePage.set_XPATH_dividcourseRightContenttabletbodytrtd2_1(), is("Question 1"));
        assertThat(_CoursePage.set_XPATH_dividcourseRightContenttabletbodytrtd4small(), is("Multiple choice (Unique answer)"));
        assertThat(_CoursePage.set_XPATH_dividcourseRightContenttabletbodytr2td2(), is("Question 2"));
        assertThat(_CoursePage.set_XPATH_dividcourseRightContenttabletbodytr2td4(), is("True/False"));
        assertThat(_CoursePage.set_XPATH_dividcourseRightContenttabletbodytr3td2(), is("Question 3"));
        assertThat(_CoursePage.set_XPATH_dividcourseRightContenttabletbodytr3td4small(), is("Multiple choice (Multiple answers)"));
        _CoursePage.click_LINKTEXT_Logout();
    }
}
