@model IoTApp.Models.StatisticsViewModel
@{
    ViewData["Title"] = "Statistics";
    var errorLocationsJson = System.Text.Json.JsonSerializer.Serialize(Model.ErrorLocations);
}

<div class="text-center">
    @if (Model.HasData)
    {
        <div class="card mx-auto" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Statistics</h5>
                <p class="card-text text-left-custom">
                    <strong>Avg Speed:</strong> @string.Format("{0:0.00}",Model.AverageSpeed) km/h <br />
                    <strong>Avg RPM:</strong> @string.Format("{0:0.00}", Model.AverageRpm) <br />
                    <strong>Avg Fuel Cons:</strong> @string.Format("{0:0.00}", Model.AverageFuelConsumptionRate) L/100km
                </p>
                <h5 class="card-title">Errors</h5>
                <p class="card-text text-left-custom">
                    @foreach (var error in Model.ErrorsByCategory)
                    {
                        <strong class="@error.Key">@error.Key:</strong> @error.Value <br />
                    }
                </p>
            </div>
        </div>

        <h4 class="mt-3">Errors on map</h4>
        <div class="mt-2" id="map" style="height: 500px; width: 100%;"></div>
    }
    else
    {
        <h2>No data available...</h2>
    }
</div>

<script>
    var errorMarkers = @Html.Raw(errorLocationsJson);

    if (errorMarkers.length > 0) {
        var firstCoord = [errorMarkers[0].Latitude, errorMarkers[0].Longitude];
        var map = L.map('map').setView(firstCoord, 13);
    } else {
        var map = L.map('map').setView([44.420, 8.951], 13);
    }

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var errorColors = {
        "Precedence": "red",
        "Stop": "blue",
        "Sidewalk": "green",
        "Crossing": "orange"
    };

    var markers = L.markerClusterGroup();

    errorMarkers.forEach(function (marker) {
        var iconUrl = `/img/marker-icon-${errorColors[marker.ErrorType]}.png`;
        var icon = L.icon({
            iconUrl: iconUrl,
            shadowUrl: '/img/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var leafletMarker = L.marker([marker.Latitude, marker.Longitude], { icon: icon })

        markers.addLayer(leafletMarker);
    });

    map.addLayer(markers);

    if (errorMarkers.length > 0) {
        var bounds = L.latLngBounds(errorMarkers.map(m => [m.Latitude, m.Longitude]));
        map.fitBounds(bounds);
    }
</script>

