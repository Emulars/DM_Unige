package TestCases;

import org.junit.BeforeClass;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import TestCases.PO.MantisBT.*;

public class TestCasesMantisBT {

    @BeforeClass()
    public static void setup() {}

    private WebDriver driver;

    private Map<String, Object> vars;

    private JavascriptExecutor js;

    @Before
    public void setUp() {
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }

    @After
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void loginTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        LoginPage _LoginPage = new LoginPage(driver, js, vars);
        _LoginPage.AdministratorLogin("administrator", "root");
        assertThat(_LoginPage.set_XPATH_spancontainsadministrator_1(), is("administrator"));
        _LoginPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addUserTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageUserPage _ManageUserPage = new ManageUserPage(driver, js, vars);
        _ManageUserPage.AddUser("administrator", "root", "username001", "username001", "username@username.it", "updater", "40");
        assertThat(_ManageUserPage.set_NAME_username_2(), is("username001"));
        {
            String value = driver.findElement(By.xpath("//input[@name=\'realname\']")).getAttribute("value");
            assertThat(value, is("username001"));
        }
        {
            String value = driver.findElement(By.xpath("//input[@name=\'email\']")).getAttribute("value");
            assertThat(value, is("username@username.it"));
        }
        {
            WebElement element = driver.findElement(By.xpath("//select[@name=\'access_level\']"));
            String value = element.getAttribute("value");
            String locator = String.format("option[@value='%s']", value);
            String selectedText = element.findElement(By.xpath(locator)).getText();
            assertThat(selectedText, is("updater"));
        }
        _ManageUserPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addExistingUserFailsTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageUserPage _ManageUserPage = new ManageUserPage(driver, js, vars);
        _ManageUserPage.AddExistingUserFails("administrator", "root", "Create New Account", "username001", "username001", "username@username.it", "updater", "40", "Create User");
        assertThat(_ManageUserPage.set_XPATH_pcontainsThatusernameisalreadybeingusedPleasegobackandselectanotherone_1(), is("That username is already being used. Please go back and select another one."));
        _ManageUserPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addEmptyUserFailsTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageUserPage _ManageUserPage = new ManageUserPage(driver, js, vars);
        _ManageUserPage.AddEmptyUserFails("administrator", "root", "Create New Account", "Create User");
        assertThat(_ManageUserPage.set_XPATH_pcontainsAnecessaryfieldwasemptyPleaserecheckyourinputs_1(), is("A necessary field \"\" was empty. Please recheck your inputs."));
        _ManageUserPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addProjectTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageProjectsPage _ManageProjectsPage = new ManageProjectsPage(driver, js, vars);
        _ManageProjectsPage.AddProject("administrator", "root", "Project001", "release", "30", "10", "Description");
        assertThat(_ManageProjectsPage.set_LINKTEXT_Project001_1(), is("Project001"));
        assertThat(_ManageProjectsPage.set_XPATH_tr3td2(), is("release"));
        assertThat(_ManageProjectsPage.set_XPATH_tr3td4(), is("public"));
        assertThat(_ManageProjectsPage.set_XPATH_tr3td5(), is("Description"));
        _ManageProjectsPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addExistingProjectFailsTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageProjectsPage _ManageProjectsPage = new ManageProjectsPage(driver, js, vars);
        _ManageProjectsPage.AddExistingProjectFails("administrator", "root", "Create New Project", "Project001", "release", "30", "10", "Description", "Add Project");
        assertThat(_ManageProjectsPage.set_XPATH_pcontainsAprojectwiththatnamealreadyexistsPleasegobackandenteradifferentname_1(), is("A project with that name already exists. Please go back and enter a different name."));
        _ManageProjectsPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addCategoryTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageCategoryPage _ManageCategoryPage = new ManageCategoryPage(driver, js, vars);
        _ManageCategoryPage.AddCategory("administrator", "root", "Category001", "Add Category");
        assertThat(_ManageCategoryPage.set_XPATH_atabletbodytr3td_1(), is("Category001"));
        _ManageCategoryPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addExistingCategoryFailsTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageCategoryPage _ManageCategoryPage = new ManageCategoryPage(driver, js, vars);
        _ManageCategoryPage.AddExistingCategoryFails("administrator", "root", "Category001", "Add Category");
        assertThat(_ManageCategoryPage.set_XPATH_pcontainsAcategorywiththatnamealreadyexists_1(), is("A category with that name already exists."));
        _ManageCategoryPage.click_LINKTEXT_Logout();
    }

    @Test
    public void addIssueTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageIssuePage _ManageIssuePage = new ManageIssuePage(driver, js, vars);
        _ManageIssuePage.AddIssue("administrator", "root", "Category001", "random", "50", "crash", "70", "immediate", "60", "Summary001", "description001");
        assertThat(_ManageIssuePage.set_XPATH_tableidbuglisttbodytr4td6_1(), is("Category001"));
        assertThat(_ManageIssuePage.set_XPATH_tableidbuglisttbodytr4td7span(), is("crash"));
        assertThat(_ManageIssuePage.set_XPATH_tableidbuglisttbodytr4td10(), is("Summary001"));
        _ManageIssuePage.click_LINKTEXT_Logout();
    }

    @Test
    public void assignIssueTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageIssuePage _ManageIssuePage = new ManageIssuePage(driver, js, vars);
        _ManageIssuePage.AssignIssue("administrator", "root", "Assign");
        assertThat(_ManageIssuePage.set_LINKTEXT_administrator_1(), is("administrator"));
        _ManageIssuePage.click_LINKTEXT_Logout();
    }

    @Test
    public void updateIssuePriorityTest() {
        driver.get("http://localhost:3000/mantisbt/login_page.php");
        ManageIssuePage _ManageIssuePage = new ManageIssuePage(driver, js, vars);
        _ManageIssuePage.UpdateIssuePriority("administrator", "root", "low");
        assertThat(_ManageIssuePage.set_XPATH_tr7td2_1(), is("low"));
        _ManageIssuePage.click_LINKTEXT_Logout();
    }
}
